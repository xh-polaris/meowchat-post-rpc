// Code generated by goctl. DO NOT EDIT!
// Source: post.proto

package postrpc

import (
	"context"

	"github.com/xh-polaris/meowchat-post-rpc/pb/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreatReq     = pb.CreatReq
	CreatResp    = pb.CreatResp
	DestroyReq   = pb.DestroyReq
	DestroyResp  = pb.DestroyResp
	ListReq      = pb.ListReq
	ListResp     = pb.ListResp
	Post         = pb.Post
	RetrieveReq  = pb.RetrieveReq
	RetrieveResp = pb.RetrieveResp
	Tag          = pb.Tag
	UpdateReq    = pb.UpdateReq
	UpdateResp   = pb.UpdateResp

	PostRPC interface {
		List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error)
		Retrieve(ctx context.Context, in *RetrieveReq, opts ...grpc.CallOption) (*RetrieveResp, error)
		Creat(ctx context.Context, in *CreatReq, opts ...grpc.CallOption) (*CreatResp, error)
		Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateResp, error)
		Destroy(ctx context.Context, in *DestroyReq, opts ...grpc.CallOption) (*DestroyResp, error)
	}

	defaultPostRPC struct {
		cli zrpc.Client
	}
)

func NewPostRPC(cli zrpc.Client) PostRPC {
	return &defaultPostRPC{
		cli: cli,
	}
}

func (m *defaultPostRPC) List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error) {
	client := pb.NewPostRPCClient(m.cli.Conn())
	return client.List(ctx, in, opts...)
}

func (m *defaultPostRPC) Retrieve(ctx context.Context, in *RetrieveReq, opts ...grpc.CallOption) (*RetrieveResp, error) {
	client := pb.NewPostRPCClient(m.cli.Conn())
	return client.Retrieve(ctx, in, opts...)
}

func (m *defaultPostRPC) Creat(ctx context.Context, in *CreatReq, opts ...grpc.CallOption) (*CreatResp, error) {
	client := pb.NewPostRPCClient(m.cli.Conn())
	return client.Creat(ctx, in, opts...)
}

func (m *defaultPostRPC) Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateResp, error) {
	client := pb.NewPostRPCClient(m.cli.Conn())
	return client.Update(ctx, in, opts...)
}

func (m *defaultPostRPC) Destroy(ctx context.Context, in *DestroyReq, opts ...grpc.CallOption) (*DestroyResp, error) {
	client := pb.NewPostRPCClient(m.cli.Conn())
	return client.Destroy(ctx, in, opts...)
}
