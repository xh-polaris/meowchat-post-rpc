// Code generated by goctl. DO NOT EDIT!

package tag_db

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tagFieldNames          = builder.RawFieldNames(&Tag{})
	tagRows                = strings.Join(tagFieldNames, ",")
	tagRowsExpectAutoSet   = strings.Join(stringx.Remove(tagFieldNames, "`id`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), ",")
	tagRowsWithPlaceHolder = strings.Join(stringx.Remove(tagFieldNames, "`id`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), "=?,") + "=?"

	cacheIyuaTagIdPrefix = "cache:iyua:tag:id:"
)

type (
	tagModel interface {
		Insert(ctx context.Context, data *Tag) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Tag, error)
		Update(ctx context.Context, data *Tag) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTagModel struct {
		sqlc.CachedConn
		table string
	}

	Tag struct {
		Id   int64  `db:"id"`
		Name string `db:"name"`
	}
)

func newTagModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTagModel {
	return &defaultTagModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`tag`",
	}
}

func (m *defaultTagModel) Delete(ctx context.Context, id int64) error {
	iyuaTagIdKey := fmt.Sprintf("%s%v", cacheIyuaTagIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, iyuaTagIdKey)
	return err
}

func (m *defaultTagModel) FindOne(ctx context.Context, id int64) (*Tag, error) {
	iyuaTagIdKey := fmt.Sprintf("%s%v", cacheIyuaTagIdPrefix, id)
	var resp Tag
	err := m.QueryRowCtx(ctx, &resp, iyuaTagIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tagRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTagModel) Insert(ctx context.Context, data *Tag) (sql.Result, error) {
	iyuaTagIdKey := fmt.Sprintf("%s%v", cacheIyuaTagIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?)", m.table, tagRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name)
	}, iyuaTagIdKey)
	return ret, err
}

func (m *defaultTagModel) Update(ctx context.Context, data *Tag) error {
	iyuaTagIdKey := fmt.Sprintf("%s%v", cacheIyuaTagIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tagRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.Id)
	}, iyuaTagIdKey)
	return err
}

func (m *defaultTagModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheIyuaTagIdPrefix, primary)
}

func (m *defaultTagModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tagRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTagModel) tableName() string {
	return m.table
}
