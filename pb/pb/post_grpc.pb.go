// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: post.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PostRPCClient is the client API for PostRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostRPCClient interface {
	List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error)
	Retrieve(ctx context.Context, in *RetrieveReq, opts ...grpc.CallOption) (*RetrieveResp, error)
	Creat(ctx context.Context, in *CreatReq, opts ...grpc.CallOption) (*CreatResp, error)
	Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateResp, error)
	Destroy(ctx context.Context, in *DestroyReq, opts ...grpc.CallOption) (*DestroyResp, error)
}

type postRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewPostRPCClient(cc grpc.ClientConnInterface) PostRPCClient {
	return &postRPCClient{cc}
}

func (c *postRPCClient) List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error) {
	out := new(ListResp)
	err := c.cc.Invoke(ctx, "/post.postRPC/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postRPCClient) Retrieve(ctx context.Context, in *RetrieveReq, opts ...grpc.CallOption) (*RetrieveResp, error) {
	out := new(RetrieveResp)
	err := c.cc.Invoke(ctx, "/post.postRPC/Retrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postRPCClient) Creat(ctx context.Context, in *CreatReq, opts ...grpc.CallOption) (*CreatResp, error) {
	out := new(CreatResp)
	err := c.cc.Invoke(ctx, "/post.postRPC/Creat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postRPCClient) Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateResp, error) {
	out := new(UpdateResp)
	err := c.cc.Invoke(ctx, "/post.postRPC/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postRPCClient) Destroy(ctx context.Context, in *DestroyReq, opts ...grpc.CallOption) (*DestroyResp, error) {
	out := new(DestroyResp)
	err := c.cc.Invoke(ctx, "/post.postRPC/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostRPCServer is the server API for PostRPC service.
// All implementations must embed UnimplementedPostRPCServer
// for forward compatibility
type PostRPCServer interface {
	List(context.Context, *ListReq) (*ListResp, error)
	Retrieve(context.Context, *RetrieveReq) (*RetrieveResp, error)
	Creat(context.Context, *CreatReq) (*CreatResp, error)
	Update(context.Context, *UpdateReq) (*UpdateResp, error)
	Destroy(context.Context, *DestroyReq) (*DestroyResp, error)
	mustEmbedUnimplementedPostRPCServer()
}

// UnimplementedPostRPCServer must be embedded to have forward compatible implementations.
type UnimplementedPostRPCServer struct {
}

func (UnimplementedPostRPCServer) List(context.Context, *ListReq) (*ListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPostRPCServer) Retrieve(context.Context, *RetrieveReq) (*RetrieveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedPostRPCServer) Creat(context.Context, *CreatReq) (*CreatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Creat not implemented")
}
func (UnimplementedPostRPCServer) Update(context.Context, *UpdateReq) (*UpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPostRPCServer) Destroy(context.Context, *DestroyReq) (*DestroyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedPostRPCServer) mustEmbedUnimplementedPostRPCServer() {}

// UnsafePostRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostRPCServer will
// result in compilation errors.
type UnsafePostRPCServer interface {
	mustEmbedUnimplementedPostRPCServer()
}

func RegisterPostRPCServer(s grpc.ServiceRegistrar, srv PostRPCServer) {
	s.RegisterService(&PostRPC_ServiceDesc, srv)
}

func _PostRPC_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostRPCServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post.postRPC/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostRPCServer).List(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostRPC_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostRPCServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post.postRPC/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostRPCServer).Retrieve(ctx, req.(*RetrieveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostRPC_Creat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostRPCServer).Creat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post.postRPC/Creat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostRPCServer).Creat(ctx, req.(*CreatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostRPC_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostRPCServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post.postRPC/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostRPCServer).Update(ctx, req.(*UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostRPC_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostRPCServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post.postRPC/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostRPCServer).Destroy(ctx, req.(*DestroyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PostRPC_ServiceDesc is the grpc.ServiceDesc for PostRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "post.postRPC",
	HandlerType: (*PostRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _PostRPC_List_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _PostRPC_Retrieve_Handler,
		},
		{
			MethodName: "Creat",
			Handler:    _PostRPC_Creat_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PostRPC_Update_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _PostRPC_Destroy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "post.proto",
}
