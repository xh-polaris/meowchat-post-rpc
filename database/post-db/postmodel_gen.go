// Code generated by goctl. DO NOT EDIT!

package post_db

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	postFieldNames          = builder.RawFieldNames(&Post{})
	postRows                = strings.Join(postFieldNames, ",")
	postRowsExpectAutoSet   = strings.Join(stringx.Remove(postFieldNames, "`id`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`"), ",")
	postRowsWithPlaceHolder = strings.Join(stringx.Remove(postFieldNames, "`id`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`"), "=?,") + "=?"

	cacheIyuaPostIdPrefix = "cache:iyua:post:id:"
)

type (
	postModel interface {
		Insert(ctx context.Context, data *Post) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Post, error)
		Update(ctx context.Context, data *Post) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPostModel struct {
		sqlc.CachedConn
		table string
	}

	Post struct {
		Id          int64        `db:"id"`
		CreateAt    time.Time    `db:"create_at"`
		DeleteAt    sql.NullTime `db:"delete_at"`
		IsDeleted   int64        `db:"is_deleted"`
		IsAnonymous byte         `db:"is_anonymous"`
		Title       string       `db:"title"`
		Text        string       `db:"text"`
		CoverUrl    string       `db:"cover_url"`
		Status      int64        `db:"status"`
		UserId      int64        `db:"user_id"`
	}
)

func newPostModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultPostModel {
	return &defaultPostModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`post`",
	}
}

func (m *defaultPostModel) Delete(ctx context.Context, id int64) error {
	iyuaPostIdKey := fmt.Sprintf("%s%v", cacheIyuaPostIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, iyuaPostIdKey)
	return err
}

func (m *defaultPostModel) FindOne(ctx context.Context, id int64) (*Post, error) {
	iyuaPostIdKey := fmt.Sprintf("%s%v", cacheIyuaPostIdPrefix, id)
	var resp Post
	err := m.QueryRowCtx(ctx, &resp, iyuaPostIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", postRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPostModel) Insert(ctx context.Context, data *Post) (sql.Result, error) {
	iyuaPostIdKey := fmt.Sprintf("%s%v", cacheIyuaPostIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, postRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DeleteAt, data.IsDeleted, data.IsAnonymous, data.Title, data.Text, data.CoverUrl, data.Status, data.UserId)
	}, iyuaPostIdKey)
	return ret, err
}

func (m *defaultPostModel) Update(ctx context.Context, data *Post) error {
	iyuaPostIdKey := fmt.Sprintf("%s%v", cacheIyuaPostIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, postRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.DeleteAt, data.IsDeleted, data.IsAnonymous, data.Title, data.Text, data.CoverUrl, data.Status, data.UserId, data.Id)
	}, iyuaPostIdKey)
	return err
}

func (m *defaultPostModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheIyuaPostIdPrefix, primary)
}

func (m *defaultPostModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", postRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPostModel) tableName() string {
	return m.table
}
